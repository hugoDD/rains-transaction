server:
  port: 8080
  servlet:
    contextPath:  /admin
  address: 0.0.0.0

tx:
  admin:
    userName: admin
    password: admin
  recover:
    serializer: kryo
    retry:  10
    application:
      - alipay-service
      - wechat-service
      - pay-service

spring:
  profiles:
    active: db
  application:
    name: tx-admin-manager
  # REDIS（RedisProperties）
  # （普通集群，不使用则不用开启）在群集中执行命令时要遵循的最大重定向数目。
  # spring.redis.cluster.max-redirects=
  # （普通集群，不使用则不用开启）以逗号分隔的“主机：端口”对列表进行引导。
  # spring.redis.cluster.nodes=
  # 连接工厂使用的数据库索引。
  redis:
    database: 2
    # 连接URL，将覆盖主机，端口和密码（用户将被忽略），例如：redis://user:password@example.com:6379
    #url=
    # Redis服务器主机。
    host: 172.26.223.109
    # Redis服务器端口
    port: 6379
    # 以毫秒为单位的连接超时。
    timeout:  2000
  # 登录redis服务器的密码。
    #password:
  # 启用SSL支持。
    #ssl: false
  # 池在给定时间可以分配的最大连接数。使用负值无限制。
    pool:
      max-active: 8
  # 池中“空闲”连接的最大数量。使用负值表示无限数量的空闲连接。
      max-idle: 8
  # 连接分配在池被耗尽时抛出异常之前应该阻塞的最长时间量（以毫秒为单位）。使用负值可以无限期地阻止。
      max-wait: -1
  # 目标为保持在池中的最小空闲连接数。这个设置只有在正面的情况下才有效果。
      min-idle: 0
  # （哨兵模式，不使用则不用开启）Redis服务器的名称。
  # spring.redis.sentinel.master=
  # （哨兵模式，不使用则不用开启）主机：端口对的逗号分隔列表。
  # spring.redis.sentinel.nodes=
  datasource:
    driver-class-name:  com.mysql.jdbc.Driver
    url: jdbc:mysql://172.26.223.28:3306/tx?useUnicode=true&characterEncoding=utf8
    username: mysqladmin
    password: MPadmin


